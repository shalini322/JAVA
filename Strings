// Q1. Input a string of size n and Update all the odd positions in the string to character ‘#’. Consider 0-based indexing.

import java.util.Scanner;

public class oddPositions {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter a string:");
        String s = sc.next();
        String t = "";
        for (int i = 0; i < s.length(); i++) {
            if (i%2!=0){
                t += '#';
            }
            else{
                t += s.charAt(i);
            }
        }
        s = t;
        System.out.println(s);
    }
}


// Q2. Input a string of length n and count all the consonants in the given string.

import java.util.Scanner;

public class noOfConsonents {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter a string:");
        String s = sc.next();
        int c = 0;
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if ((ch != 'a') && (ch != 'e') && (ch != 'i') && (ch != 'o') && (ch != 'u') ){
                c++;
            }
        }
        System.out.print("no of consonents are: "+c);
    }
}


// Q3. Check whether the given string is palindrome or not.

import java.util.Scanner;

public class palindromeString {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter a string:");
        String s = sc.next();
        char[] ch = s.toCharArray();
        int i = 0;
        int j = ch.length-1;
        boolean flag = false;
        while (i<j){
            if (ch[i] == ch[j]){
                flag = true;
            }
            i++;
            j--;
        }
        if (flag == true) System.out.println("palindrome string");
        else System.out.println("non palindrome string");
    }
}



